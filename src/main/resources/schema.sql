
drop table IF EXISTS
USERS,
FILMS,
FILMS_GENRES,
FRIENDS,
LIKES,
GENRES,
RATINGS;

create table if not exists GENRES (
	GENRE_ID integer not null GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	GENRE_NAME CHARACTER VARYING(50) NOT NULL
);

-- Creating the RATINGS table:
create table if not exists RATINGS (
	RATING_ID integer not null GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	RATING_NAME CHARACTER VARYING(10) NOT NULL,
	RATING_DESC CHARACTER VARYING(100) NOT NULL
);

-- Creating the USERS table:
create table if not exists USERS (
	USER_ID integer not null GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(100),
	LOGIN CHARACTER VARYING(100) NOT NULL,
	EMAIL CHARACTER VARYING NOT NULL,
	BIRTHDAY DATE NOT NULL
);

-- Creating the FILMS table:
create table if not exists FILMS (
	FILM_ID integer not null GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(100) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	RATING_ID INTEGER NOT NULL,
	CONSTRAINT FILMS_FK FOREIGN KEY (RATING_ID) REFERENCES RATINGS(RATING_ID) ON delete CASCADE ON update CASCADE);

-- Creating the FILMS_GENRES table:
create table if not exists FILMS_GENRES (
	GENRE_ID integer not null,
	FILM_ID integer not null,
	constraint FILMS_GENRES_PK primary key (GENRE_ID,FILM_ID),
	constraint FILMS_GENRES_FK_1 foreign key (GENRE_ID) references GENRES(GENRE_ID) on delete cascade on update cascade,
	constraint FILMS_GENRES_FK_2 foreign key (FILM_ID) references FILMS(FILM_ID) on delete cascade on update cascade);

-- Creating the FRIENDS table:
create table if not exists FRIENDS (
	USER_ID integer not null,
	FRIEND_ID integer not null,
	constraint FRIENDS_PK primary key (FRIEND_ID,USER_ID),
	constraint FRIENDS_FK_1 foreign key (USER_ID) references USERS(USER_ID) on delete cascade on update cascade,
	constraint FRIENDS_FK_2 foreign key (FRIEND_ID) references USERS(USER_ID) on delete cascade on update cascade
);

-- Creating the LIKES table:
create table if not exists LIKES (
	FILM_ID integer not null,
	USER_ID integer not null,
	constraint LIKES_PK primary key (FILM_ID,USER_ID),
	constraint LIKES_FK_1 foreign key (USER_ID) references USERS(USER_ID) on delete cascade on update cascade,
	constraint LIKES_FK_2 foreign key (FILM_ID) references FILMS(FILM_ID) on delete cascade on update cascade);